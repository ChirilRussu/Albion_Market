// https://www.albion-online-data.com/api/swagger/index.html - can make a sample call
// https://github.com/broderickhyman/ao-bin-dumps/blob/master/formatted/items.txt - items dump

// trigger that runs on spreadsheet open https://developers.google.com/apps-script/guides/triggers
function onOpen()
{
  // adds a menu at the top and populates with functions
  let ui = SpreadsheetApp.getUi();
  ui.createMenu("Functions")
    .addItem("Refresh Armor 1" , "armorApiCallOne")
    .addItem("Refresh Armor 2" , "armorApiCallTwo")
    .addItem("Refresh Resources" , "resourceApiCall")
      .addToUi();
} // will error out if ran from editor - function's menu appear on the sheet after a delay


function armorApiCallOne() // need to make 2 calls for armors because of limits
{
  // defines sheets
  var global_sheet = SpreadsheetApp.getActiveSpreadsheet(); //defines the spreadsheet
  var armor_data = global_sheet.getSheetByName("Armor_Data"); //defines the sheet to which data will be added
  var armor_sheet = global_sheet.getSheetByName("Armor_List"); //armor list


  // clears cells
  // armor_data.getRange("A1:A2000").clear();


  // (example) var URL_STRING = "https://www.albion-online-data.com/api/v2/stats/Prices/T4_ARMOR_CLOTH_SET2%402%2CT4_ARMOR_CLOTH_SET2%403.JSON?locations=Fort%20Sterling&qualities=1";
  // variables to create the URL
  var current_url; // start of the URL to be concatenated to
  //can pull ~50 items at a time - 2048 character limit of the request URL
  var item_number = 50; // number of items to be pulled  
  var calls_number = 14; // number of calls to be made - API limist - 300 calls every ~5 or 15 minutes, but google sheets has a 5 minute script execution time limit.
  var comma = "%2C" // url code for comma
  var end_url = ".JSON?locations=Fort%20Sterling&qualities=1" //quality 0 returns all qualities
  var armor_range;
  var armor_cell_value;
  var full_url; 

  // variables used to make the API call
  var response;
  var json;
  var data;
  var start_row = 2; // will start writting on this row - skips frozen headers

  // variables used to populate item_id cells
  // 1st column
  var itemObject = {};
  itemObject["item_id"] = 1; // object type which will hold item ID
  // 2nd column
  var itemNameRange;
  var itemName;
  // 3d column
  var minSelleObject = {};
  minSelleObject["sell_price_min"] = 1; // object type which will hold min sell price
  // 4th column
  var minBuyObject = {};
  minBuyObject["buy_price_max"] = 1; // object type which will hold max buy price


  // loop to make x number of calls
  for(x = 0; x < calls_number; x++)
  {
    // creates the URL for a single API call
    current_url = "https://www.albion-online-data.com/api/v2/stats/Prices/";
    for(i = 1; i < item_number+1; i++) // starts countring from 1st cell
    {
      armor_range = armor_sheet.getRange("A"+((i+1)+(item_number*x))); // +1 to skip headers , item_number*x goes to the next set of 50 items on the list 
      armor_cell_value = armor_range.getValue();
      full_url = current_url + armor_cell_value + comma;
      //Logger.log(armor_cell_value);
      current_url = full_url;
    }
    full_url = current_url + end_url;


    // variables used to make the API call
    response = UrlFetchApp.fetch(full_url);
    json = response.getContentText();
    data = JSON.parse(json);

      
    // dynamically creates varaibles to populates cells
    for(i = 0; i < item_number; i++) // starts counting from 0th item in the array
    {
      // populates item ID cells
      itemObject[ ("item_id"+i) ] = data[i].item_id; //the json that albion data gives is an ARRAY of objects - that's why it's data[i]
      armor_data.getRange((start_row+i)+(item_number*x),1).setValue(itemObject["item_id"+i]); // cell (row_num+i,1) = (2+0,1) = (B,1) where i = 0.
      //Logger.log(i);

      // populates item name based on the armor list sheet
      itemNameRange = armor_sheet.getRange((start_row+i)+(item_number*x),2); // item_number*x goes to the next set of 50 items on the list
      itemName = itemNameRange.getValue();
      armor_data.getRange((start_row+i)+(item_number*x),2).setValue(itemName);   
      //Logger.log(itemName);
      
      // populates min cell price cells
      minSelleObject[("sell_price_min"+i)] = data[i].sell_price_min;
      //Logger.log(data[i].sell_price_min);
      if (minSelleObject[("sell_price_min"+i)]=="0.0" || minSelleObject[("sell_price_min"+i)]=="1.0")
      {
        //Logger.log("Reached sell return");
      }
      else
      {
        //Logger.log("Reached set value");
        armor_data.getRange((start_row+i)+(item_number*x),3).setValue(minSelleObject["sell_price_min"+i]);
      }
      
      // populates min cell price cells
      minBuyObject[("buy_price_max"+i)] = data[i].buy_price_min;
      //Logger.log(data[i].buy_price_min);
      if (minBuyObject[("buy_price_max"+i)]=="0.0" || minBuyObject[("buy_price_max"+i)]=="1.0")
      {
        //Logger.log("Reached buy return");
      }
      else
      {
        armor_data.getRange((start_row+i)+(item_number*x),4).setValue(minBuyObject["buy_price_max"+i]);
      }
    }  
  } 
}


function armorApiCallTwo() // need to make 2 calls for armors because of limits
// differense from armorApiCallOne is start_row and armor_range account for 700 items already pulled by call one.
{
  // defines sheets
  var global_sheet = SpreadsheetApp.getActiveSpreadsheet(); //defines the spreadsheet
  var armor_data = global_sheet.getSheetByName("Armor_Data"); //defines the sheet to which data will be added
  var armor_sheet = global_sheet.getSheetByName("Armor_List"); //armor list


  // clears cells
  // armor_data.getRange("A1:A2000").clear();


  // (example) var URL_STRING = "https://www.albion-online-data.com/api/v2/stats/Prices/T4_ARMOR_CLOTH_SET2%402%2CT4_ARMOR_CLOTH_SET2%403.JSON?locations=Fort%20Sterling&qualities=1";
  // variables to create the URL
  var current_url; // start of the URL to be concatenated to
  //can pull ~50 items at a time - 2048 character limit of the request URL
  var item_number = 50; // number of items to be pulled  
  var calls_number = 14; // number of calls to be made - API limist - 300 calls every ~5 or 15 minutes, but google sheets has a 5 minute script execution time limit.
  var comma = "%2C" // url code for comma
  var end_url = ".JSON?locations=Fort%20Sterling&qualities=1" //quality 0 returns all qualities
  var armor_range;
  var armor_cell_value;
  var full_url; 

  // variables used to make the API call
  var response;
  var json;
  var data;
  var start_row = 702; // will start writting on this row - skips frozen headers

  // variables used to populate item_id cells
  // 1st column
  var itemObject = {};
  itemObject["item_id"] = 1; // object type which will hold item ID
  // 2nd column
  var itemNameRange;
  var itemName;
  // 3d column
  var minSelleObject = {};
  minSelleObject["sell_price_min"] = 1; // object type which will hold min sell price
  // 4th column
  var minBuyObject = {};
  minBuyObject["buy_price_max"] = 1; // object type which will hold max buy price


  // loop to make x number of calls
  for(x = 0; x < calls_number; x++)
  {
    // creates the URL for a single API call
    current_url = "https://www.albion-online-data.com/api/v2/stats/Prices/";
    for(i = 1; i < item_number+1; i++) // starts countring from 1st cell
    {
      armor_range = armor_sheet.getRange("A"+((i+1+700)+(item_number*x))); // +1 to skip headers , item_number*x goes to the next set of 50 items on the list 
      armor_cell_value = armor_range.getValue();
      full_url = current_url + armor_cell_value + comma;
      //Logger.log(armor_cell_value);
      current_url = full_url;
    }
    full_url = current_url + end_url;


    // variables used to make the API call
    response = UrlFetchApp.fetch(full_url);
    json = response.getContentText();
    data = JSON.parse(json);

      
    // dynamically creates varaibles to populates cells
    for(i = 0; i < item_number; i++) // starts counting from 0th item in the array
    {
      // populates item ID cells
      itemObject[ ("item_id"+i) ] = data[i].item_id; //the json that albion data gives is an ARRAY of objects - that's why it's data[i]
      armor_data.getRange((start_row+i)+(item_number*x),1).setValue(itemObject["item_id"+i]); // cell (row_num+i,1) = (2+0,1) = (B,1) where i = 0.
      //Logger.log(i);

      // populates item name based on the armor list sheet
      itemNameRange = armor_sheet.getRange((start_row+i)+(item_number*x),2); // item_number*x goes to the next set of 50 items on the list
      itemName = itemNameRange.getValue();
      armor_data.getRange((start_row+i)+(item_number*x),2).setValue(itemName);   
      //Logger.log(itemName);
      
      // populates min cell price cells
      minSelleObject[ ("sell_price_min"+i) ] = data[i].sell_price_min;
      //Logger.log(data[i].sell_price_min);
      if (minSelleObject[("sell_price_min"+i)]=="0.0" || minSelleObject[("sell_price_min"+i)]=="1.0")
      {
        
      }
      else
      {
        armor_data.getRange((start_row+i)+(item_number*x),3).setValue(minSelleObject["sell_price_min"+i]);
      }
      
      // populates min cell price cells
      minBuyObject[("buy_price_max"+i)] = data[i].buy_price_min;
      //Logger.log(data[i].buy_price_min);
      if (minBuyObject[("buy_price_max"+i)]=="0.0" || minBuyObject[("buy_price_max"+i)]=="1.0")
      {
        
      }
      else
      {
        armor_data.getRange((start_row+i)+(item_number*x),4).setValue(minBuyObject["buy_price_max"+i]);
      }
    }  
  } 
}


function resourceApiCall()
{
  // defines sheets
  var global_sheet = SpreadsheetApp.getActiveSpreadsheet(); //defines the spreadsheet
  var resource_data = global_sheet.getSheetByName("Resource_Data"); //defines the sheet to which data will be added
  var resource_sheet = global_sheet.getSheetByName("Resource_List"); //resource list

  //sorts work sheet
  resource_data.sort(1); //column 1

  // clears cells
  // resource_data.getRange("A1:A2000").clear();


  // (example) var URL_STRING = "https://www.albion-online-data.com/api/v2/stats/Prices/T4_ARMOR_CLOTH_SET2%402%2CT4_ARMOR_CLOTH_SET2%403.JSON?locations=Fort%20Sterling&qualities=1";
  // variables to create the URL
  var current_url; // start of the URL to be concatenated to
  //can pull ~50 items at a time - 2048 character limit of the request URL
  var item_number = 50; // number of items to be pulled  
  var calls_number = 5; // number of calls to be made - API limist - 300 calls every ~5 or 15 minutes, but google sheets has a 5 minute script execution time limit.
  var comma = "%2C" // url code for comma
  // CITIES ARE RETURNED IN ALPHAETICAL ORDER
  var end_url = ".JSON?locations=" + "FortSterling" + comma + "Thetford" + comma + "Martlock" + comma + "Lymhurst" + comma + "Bridgewatch" +  comma + "Caerleon" + "&qualities=1" //quality 0 returns all qualities
  var resource_range;
  var resource_cell_value;
  var full_url; 
  var city_number = 6;

  // variables used to make the API call
  var response;
  var json;
  var data;
  var start_row = 2; // will start writting on this row - skips frozen headers

  // variables used to populate item_id cells
  // 1st column
  var itemObject = {};
  itemObject["item_id"] = 1; // object type which will hold item ID
  // 2nd column
  var itemNameRange;
  var itemName;
  // 3d column
  var minSelleObject = {};
  minSelleObject["sell_price_min"] = 1; // object type which will hold min sell price
  // 4th column
  var maxBuyObject = {};
  maxBuyObject["buy_price_max"] = 1; // object type which will hold max buy price


  // loop to make x number of calls
  for(x = 0; x < calls_number; x++)
  {
    // creates the URL for a single API call
    current_url = "https://www.albion-online-data.com/api/v2/stats/Prices/";
    for(i = 1; i < item_number+1; i++) // starts countring from 1st cell
    {
      resource_range = resource_sheet.getRange("A"+((i+1)+(item_number*x))); // +1 to skip headers , item_number*x goes to the next set of 50 items on the list 
      resource_cell_value = resource_range.getValue();
      full_url = current_url + resource_cell_value + comma;
      //Logger.log(resource_cell_value);
      current_url = full_url;
    }
    full_url = current_url + end_url;


    // variables used to make the API call
    response = UrlFetchApp.fetch(full_url);
    json = response.getContentText();
    data = JSON.parse(json);

      
    // dynamically creates varaibles to populates cells
    for(i = 0; i < item_number; i++) // starts counting from 0th item in the array
    {
      var name_skip = i*city_number; // this is used to skip the name of every Nth array object because they repeat for every city.

      // populates item ID cells
      itemObject[ ("item_id"+name_skip) ] = data[name_skip].item_id; //the json that albion data gives is an ARRAY of objects - that's why it's data[i]
      resource_data.getRange((start_row+i)+(item_number*x),1).setValue(itemObject["item_id"+name_skip]); // cell (row_num+i,1) = (2+0,1) = (B,1) where i = 0.
      //Logger.log(name_skip);

      // populates item name based on the resource list sheet
      itemNameRange = resource_sheet.getRange((start_row+i)+(item_number*x),2); // item_number*x goes to the next set of 50 items on the list
      itemName = itemNameRange.getValue();
      resource_data.getRange((start_row+i)+(item_number*x),2).setValue(itemName);   
      Logger.log(itemName);
      
      // populates prices for different cities
      for(a = 0; a < city_number; a++)
      {
        // populates min cell price cells
        minSelleObject[ ("sell_price_min"+i) ] = data[i*city_number+a].sell_price_min; // math magic, in the end it's just counting by 1
        Logger.log(data[i].sell_price_min);
        if (minSelleObject[ ("sell_price_min"+i) ]=="0.0" || minSelleObject[ ("sell_price_min"+i) ]=="1.0")
        {
          
        }
        else
        {
          resource_data.getRange((start_row+i)+(item_number*x),3+a*2).setValue(minSelleObject["sell_price_min"+i]); // columns are 3d + a (up to city number)
        }
        
        
        // populates min cell price cells
        maxBuyObject[ ("buy_price_max"+i) ] = data[i*city_number+a].buy_price_max; // math magic, in the end it's just counting by 1
        Logger.log(data[i].buy_price_max);
        if (maxBuyObject[ ("buy_price_max"+i) ]=="0.0" || maxBuyObject[ ("buy_price_max"+i) ]=="1.0")
        {
          
        }
        else
        {
          resource_data.getRange((start_row+i)+(item_number*x),3+a*2+1).setValue(maxBuyObject["buy_price_max"+i]); // columns are 3d + a (up to city number)
        }

      }
    }  
  } 
}
